{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nconst AppointmentStatusUpdater = () => {\n  _s();\n  useEffect(() => {\n    const updateAppointments = async () => {\n      try {\n        const res = await fetch(`${process.env.REACT_APP_API_BASE_URL}/appointments`);\n        const data = await res.json();\n        const now = new Date();\n        data.forEach(async appt => {\n          let apptTime = null;\n          if (appt.type === \"instant\") {\n            if (!appt.timeSlot) {\n              const timeSlot = new Date().toISOString();\n              await fetch(`${process.env.REACT_APP_API_BASE_URL}/appointments/${appt.id}`, {\n                method: \"PATCH\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                  timeSlot\n                })\n              });\n              return;\n            }\n            apptTime = new Date(appt.timeSlot);\n          } else if (appt.type === \"normal\") {\n            if (appt.date && appt.selectedSlot) {\n              const [startTimeStr] = appt.selectedSlot.split(\" - \");\n              const dateTimeStr = `${appt.date} ${startTimeStr}`;\n              apptTime = new Date(dateTimeStr);\n            }\n          }\n          if (apptTime && now - apptTime > 30 * 60 * 1000 && appt.status !== \"completed\") {\n            await fetch(`${process.env.REACT_APP_API_BASE_URL}/appointments/${appt.id}`, {\n              method: \"PATCH\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                status: \"completed\"\n              })\n            });\n          }\n        });\n      } catch (error) {\n        console.error(\"Failed to update appointment statuses:\", error);\n      }\n    };\n    updateAppointments();\n  }, []);\n  return null;\n};\n_s(AppointmentStatusUpdater, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = AppointmentStatusUpdater;\nexport default AppointmentStatusUpdater;\nvar _c;\n$RefreshReg$(_c, \"AppointmentStatusUpdater\");","map":{"version":3,"names":["useEffect","AppointmentStatusUpdater","_s","updateAppointments","res","fetch","process","env","REACT_APP_API_BASE_URL","data","json","now","Date","forEach","appt","apptTime","type","timeSlot","toISOString","id","method","headers","body","JSON","stringify","date","selectedSlot","startTimeStr","split","dateTimeStr","status","error","console","_c","$RefreshReg$"],"sources":["C:/Page/Projects/Projects/MSCHealth/src/Components/Appointment/AppointmentStatusUpdater.jsx"],"sourcesContent":["import { useEffect } from \"react\";\r\n\r\nconst AppointmentStatusUpdater = () => {\r\n  useEffect(() => {\r\n    const updateAppointments = async () => {\r\n      try {\r\n        const res = await fetch(\r\n          `${process.env.REACT_APP_API_BASE_URL}/appointments`\r\n        );\r\n        const data = await res.json();\r\n        const now = new Date();\r\n\r\n        data.forEach(async (appt) => {\r\n          let apptTime = null;\r\n\r\n          if (appt.type === \"instant\") {\r\n            if (!appt.timeSlot) {\r\n              const timeSlot = new Date().toISOString();\r\n              await fetch(\r\n                `${process.env.REACT_APP_API_BASE_URL}/appointments/${appt.id}`,\r\n                {\r\n                  method: \"PATCH\",\r\n                  headers: { \"Content-Type\": \"application/json\" },\r\n                  body: JSON.stringify({ timeSlot }),\r\n                }\r\n              );\r\n              return;\r\n            }\r\n            apptTime = new Date(appt.timeSlot);\r\n          } else if (appt.type === \"normal\") {\r\n            if (appt.date && appt.selectedSlot) {\r\n              const [startTimeStr] = appt.selectedSlot.split(\" - \");\r\n              const dateTimeStr = `${appt.date} ${startTimeStr}`;\r\n              apptTime = new Date(dateTimeStr);\r\n            }\r\n          }\r\n\r\n          if (\r\n            apptTime &&\r\n            now - apptTime > 30 * 60 * 1000 &&\r\n            appt.status !== \"completed\"\r\n          ) {\r\n            await fetch(\r\n              `${process.env.REACT_APP_API_BASE_URL}/appointments/${appt.id}`,\r\n              {\r\n                method: \"PATCH\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ status: \"completed\" }),\r\n              }\r\n            );\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Failed to update appointment statuses:\", error);\r\n      }\r\n    };\r\n\r\n    updateAppointments();\r\n  }, []);\r\n\r\n  return null;\r\n};\r\n\r\nexport default AppointmentStatusUpdater;\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AAEjC,MAAMC,wBAAwB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrCF,SAAS,CAAC,MAAM;IACd,MAAMG,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CACrB,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,eACvC,CAAC;QACD,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;QAC7B,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;QAEtBH,IAAI,CAACI,OAAO,CAAC,MAAOC,IAAI,IAAK;UAC3B,IAAIC,QAAQ,GAAG,IAAI;UAEnB,IAAID,IAAI,CAACE,IAAI,KAAK,SAAS,EAAE;YAC3B,IAAI,CAACF,IAAI,CAACG,QAAQ,EAAE;cAClB,MAAMA,QAAQ,GAAG,IAAIL,IAAI,CAAC,CAAC,CAACM,WAAW,CAAC,CAAC;cACzC,MAAMb,KAAK,CACT,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,iBAAiBM,IAAI,CAACK,EAAE,EAAE,EAC/D;gBACEC,MAAM,EAAE,OAAO;gBACfC,OAAO,EAAE;kBAAE,cAAc,EAAE;gBAAmB,CAAC;gBAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;kBAAEP;gBAAS,CAAC;cACnC,CACF,CAAC;cACD;YACF;YACAF,QAAQ,GAAG,IAAIH,IAAI,CAACE,IAAI,CAACG,QAAQ,CAAC;UACpC,CAAC,MAAM,IAAIH,IAAI,CAACE,IAAI,KAAK,QAAQ,EAAE;YACjC,IAAIF,IAAI,CAACW,IAAI,IAAIX,IAAI,CAACY,YAAY,EAAE;cAClC,MAAM,CAACC,YAAY,CAAC,GAAGb,IAAI,CAACY,YAAY,CAACE,KAAK,CAAC,KAAK,CAAC;cACrD,MAAMC,WAAW,GAAG,GAAGf,IAAI,CAACW,IAAI,IAAIE,YAAY,EAAE;cAClDZ,QAAQ,GAAG,IAAIH,IAAI,CAACiB,WAAW,CAAC;YAClC;UACF;UAEA,IACEd,QAAQ,IACRJ,GAAG,GAAGI,QAAQ,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,IAC/BD,IAAI,CAACgB,MAAM,KAAK,WAAW,EAC3B;YACA,MAAMzB,KAAK,CACT,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,iBAAiBM,IAAI,CAACK,EAAE,EAAE,EAC/D;cACEC,MAAM,EAAE,OAAO;cACfC,OAAO,EAAE;gBAAE,cAAc,EAAE;cAAmB,CAAC;cAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;gBAAEM,MAAM,EAAE;cAAY,CAAC;YAC9C,CACF,CAAC;UACH;QACF,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAChE;IACF,CAAC;IAED5B,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,IAAI;AACb,CAAC;AAACD,EAAA,CA3DID,wBAAwB;AAAAgC,EAAA,GAAxBhC,wBAAwB;AA6D9B,eAAeA,wBAAwB;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}