{"ast":null,"code":"import{useEffect}from\"react\";const AppointmentStatusUpdater=()=>{useEffect(()=>{const updateAppointments=async()=>{try{const res=await fetch(\"\".concat(process.env.REACT_APP_API_BASE_URL,\"/appointments\"));const data=await res.json();const now=new Date();data.forEach(async appt=>{let apptTime=null;if(appt.type===\"instant\"){if(!appt.timeSlot){const timeSlot=new Date().toISOString();await fetch(\"\".concat(process.env.REACT_APP_API_BASE_URL,\"/appointments/\").concat(appt.id),{method:\"PATCH\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({timeSlot})});return;}apptTime=new Date(appt.timeSlot);}else if(appt.type===\"normal\"){if(appt.date&&appt.selectedSlot){const[startTimeStr]=appt.selectedSlot.split(\" - \");const dateTimeStr=\"\".concat(appt.date,\" \").concat(startTimeStr);apptTime=new Date(dateTimeStr);}}if(apptTime&&now-apptTime>30*60*1000&&appt.status!==\"completed\"){await fetch(\"\".concat(process.env.REACT_APP_API_BASE_URL,\"/appointments/\").concat(appt.id),{method:\"PATCH\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({status:\"completed\"})});}});}catch(error){console.error(\"Failed to update appointment statuses:\",error);}};updateAppointments();},[]);return null;};export default AppointmentStatusUpdater;","map":{"version":3,"names":["useEffect","AppointmentStatusUpdater","updateAppointments","res","fetch","concat","process","env","REACT_APP_API_BASE_URL","data","json","now","Date","forEach","appt","apptTime","type","timeSlot","toISOString","id","method","headers","body","JSON","stringify","date","selectedSlot","startTimeStr","split","dateTimeStr","status","error","console"],"sources":["C:/Page/Projects/Projects/MSCHealth/src/Components/Appointment/AppointmentStatusUpdater.jsx"],"sourcesContent":["import { useEffect } from \"react\";\r\n\r\nconst AppointmentStatusUpdater = () => {\r\n  useEffect(() => {\r\n    const updateAppointments = async () => {\r\n      try {\r\n        const res = await fetch(\r\n          `${process.env.REACT_APP_API_BASE_URL}/appointments`\r\n        );\r\n        const data = await res.json();\r\n        const now = new Date();\r\n\r\n        data.forEach(async (appt) => {\r\n          let apptTime = null;\r\n\r\n          if (appt.type === \"instant\") {\r\n            if (!appt.timeSlot) {\r\n              const timeSlot = new Date().toISOString();\r\n              await fetch(\r\n                `${process.env.REACT_APP_API_BASE_URL}/appointments/${appt.id}`,\r\n                {\r\n                  method: \"PATCH\",\r\n                  headers: { \"Content-Type\": \"application/json\" },\r\n                  body: JSON.stringify({ timeSlot }),\r\n                }\r\n              );\r\n              return;\r\n            }\r\n            apptTime = new Date(appt.timeSlot);\r\n          } else if (appt.type === \"normal\") {\r\n            if (appt.date && appt.selectedSlot) {\r\n              const [startTimeStr] = appt.selectedSlot.split(\" - \");\r\n              const dateTimeStr = `${appt.date} ${startTimeStr}`;\r\n              apptTime = new Date(dateTimeStr);\r\n            }\r\n          }\r\n\r\n          if (\r\n            apptTime &&\r\n            now - apptTime > 30 * 60 * 1000 &&\r\n            appt.status !== \"completed\"\r\n          ) {\r\n            await fetch(\r\n              `${process.env.REACT_APP_API_BASE_URL}/appointments/${appt.id}`,\r\n              {\r\n                method: \"PATCH\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ status: \"completed\" }),\r\n              }\r\n            );\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Failed to update appointment statuses:\", error);\r\n      }\r\n    };\r\n\r\n    updateAppointments();\r\n  }, []);\r\n\r\n  return null;\r\n};\r\n\r\nexport default AppointmentStatusUpdater;\r\n"],"mappings":"AAAA,OAASA,SAAS,KAAQ,OAAO,CAEjC,KAAM,CAAAC,wBAAwB,CAAGA,CAAA,GAAM,CACrCD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAE,kBAAkB,CAAG,KAAAA,CAAA,GAAY,CACrC,GAAI,CACF,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAClBC,OAAO,CAACC,GAAG,CAACC,sBAAsB,iBACvC,CAAC,CACD,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAN,GAAG,CAACO,IAAI,CAAC,CAAC,CAC7B,KAAM,CAAAC,GAAG,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAEtBH,IAAI,CAACI,OAAO,CAAC,KAAO,CAAAC,IAAI,EAAK,CAC3B,GAAI,CAAAC,QAAQ,CAAG,IAAI,CAEnB,GAAID,IAAI,CAACE,IAAI,GAAK,SAAS,CAAE,CAC3B,GAAI,CAACF,IAAI,CAACG,QAAQ,CAAE,CAClB,KAAM,CAAAA,QAAQ,CAAG,GAAI,CAAAL,IAAI,CAAC,CAAC,CAACM,WAAW,CAAC,CAAC,CACzC,KAAM,CAAAd,KAAK,IAAAC,MAAA,CACNC,OAAO,CAACC,GAAG,CAACC,sBAAsB,mBAAAH,MAAA,CAAiBS,IAAI,CAACK,EAAE,EAC7D,CACEC,MAAM,CAAE,OAAO,CACfC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEP,QAAS,CAAC,CACnC,CACF,CAAC,CACD,OACF,CACAF,QAAQ,CAAG,GAAI,CAAAH,IAAI,CAACE,IAAI,CAACG,QAAQ,CAAC,CACpC,CAAC,IAAM,IAAIH,IAAI,CAACE,IAAI,GAAK,QAAQ,CAAE,CACjC,GAAIF,IAAI,CAACW,IAAI,EAAIX,IAAI,CAACY,YAAY,CAAE,CAClC,KAAM,CAACC,YAAY,CAAC,CAAGb,IAAI,CAACY,YAAY,CAACE,KAAK,CAAC,KAAK,CAAC,CACrD,KAAM,CAAAC,WAAW,IAAAxB,MAAA,CAAMS,IAAI,CAACW,IAAI,MAAApB,MAAA,CAAIsB,YAAY,CAAE,CAClDZ,QAAQ,CAAG,GAAI,CAAAH,IAAI,CAACiB,WAAW,CAAC,CAClC,CACF,CAEA,GACEd,QAAQ,EACRJ,GAAG,CAAGI,QAAQ,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,EAC/BD,IAAI,CAACgB,MAAM,GAAK,WAAW,CAC3B,CACA,KAAM,CAAA1B,KAAK,IAAAC,MAAA,CACNC,OAAO,CAACC,GAAG,CAACC,sBAAsB,mBAAAH,MAAA,CAAiBS,IAAI,CAACK,EAAE,EAC7D,CACEC,MAAM,CAAE,OAAO,CACfC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEM,MAAM,CAAE,WAAY,CAAC,CAC9C,CACF,CAAC,CACH,CACF,CAAC,CAAC,CACJ,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,CAAEA,KAAK,CAAC,CAChE,CACF,CAAC,CAED7B,kBAAkB,CAAC,CAAC,CACtB,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,KAAI,CACb,CAAC,CAED,cAAe,CAAAD,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}